// Đưa phần tử lớn nhất về đầu mảng
void heapify(int arr[], int n, int i) {
    int largest = i; // Khởi tạo largest như là nốt cha
    int left = 2 * i + 1; // left = 2*i + 1
    int right = 2 * i + 2; // right = 2*i + 2
 
    // Nếu nốt con bên trái lớn hơn nốt cha
    if (left < n && arr[left] > arr[largest])
        largest = left;
 
    // Nếu nốt con bên phải lớn hơn nốt cha
    if (right < n && arr[right] > arr[largest])
        largest = right;
 
    // Nếu largest không phải nốt cha
    if (largest != i) {
        swap(arr[i], arr[largest]);
 
        // Đệ quy lại hàm heapify
        heapify(arr, n, largest);
    }
}
 
// Hàm sắp xếp chính của HeapSort
void heapSort(int arr[], int n) {
    // Xây dựng heap (sắp xếp mảng)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
 
    // Trích xuất từng phần tử từ heap
    for (int i = n - 1; i >= 0; i--) {
        // Di chuyển root hiện tại đến end
        swap(arr[0], arr[i]);
 
        // gọi lại hàm heapify cho heap mới (giảm độ dài của heap)
        heapify(arr, i, 0);
    }
}
